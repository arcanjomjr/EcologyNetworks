library(RCurl)
x <- getURL("https://raw.githubusercontent.com/mlurgi/networks_for_r/master/datasets/benguela.edgelist")
install.packages("Rcurl")
install.packages("RCurl")
library(RCurl)
x <- getURL("https://raw.githubusercontent.com/mlurgi/networks_for_r/master/datasets/benguela.edgelist")
benguela.EL <- read.table(text = x)
benguela.EL <- as.matrix(benguela.EL)
# Create an adjacency matrix called benguela.AM, containing only zeros
benguela.AM <- matrix(0, max(benguela.EL), max(benguela.EL))
# Introduce ones to the matrix to represent interactions between species
benguela.AM[benguela.EL] <- 1
# species richness
S <- dim(benguela.AM)[1]
S
# number of links
L <- sum(benguela.AM)
library(RCurl)
y <- getURL("https://raw.githubusercontent.com/mlurgi/networks_for_r/master/datasets/anemonefish.txt")
anemonef <- read.table(text = y)
names(anemonef) <- paste("A", 1:10, sep = "")
row.names(anemonef) <- paste("F", 1:26, sep = "")
anemonef <- as.matrix(anemonef)
### The number of fish species in the network is the number of rows
n_fish <- dim(anemonef)[1]
### The number of anemone species is the number of columns
n_anemone <- dim(anemonef)[2]
### So, the total number of species is the sum of these two quantities
S <- n_fish + n_anemone
### Whereas the total number of interactions is still the sum of the matrix
L <- sum(anemonef)
## Install igraph
install.packages("igraph")
## Load igraph into workspace
library(igraph)
require(igraph)
species <- 1:10
network <- graph.empty() + vertices(species)
#Link between species 5 and 7
network[5,7] <- 1
library(RCurl)
x <- getURL("https://raw.githubusercontent.com/mlurgi/networks_for_r/master/datasets/benguela.edgelist")
benguela.EL <- read.table(text = x)
benguela.EL <- as.matrix(benguela.EL)
# Create an adjacency matrix called benguela.AM, containing only zeros
benguela.AM <- matrix(0, max(benguela.EL), max(benguela.EL))
# Introduce ones to the matrix to represent interactions between species
benguela.AM[benguela.EL] <- 1
# Convert Benguela adjacency matrix to an igraph network
benguela.network <- graph.adjacency(benguela.AM)
# Plotting your network
plot(network)
# Plot the Benguela food web
plot(benguela.network, edge.arrow.size = 0.2)
# number of species
S <- vcount(network)
S
# number of interactions
L <- ecount(network)
# average number of interactions species
L.S <- L/S
# food web connectance
C <- L/S^2
# Calculate connectance
connectance <- ecount(benguela.network) / vcount(benguela.network)^2
# Print connectance va
print(paste0('Connectance of Benguela network =', round(connectance,2)))
# Calculate number of links per species
links.per.species <- ecount(benguela.network) / vcount(benguela.network)
y
y <- getURL("https://raw.githubusercontent.com/seblun/networks_datacamp/master/datasets/anemonefish.txt")
anemonef <- read.table(text = y)
names(anemonef) <- paste("A", 1:10, sep = "")
row.names(anemonef) <- paste("F", 1:26, sep = "")
anemonef <- as.matrix(anemonef)
# Calculate conectance of anemoref
bipartite.connectance <- sum(anemonef) / (dim(anemonef)[1] * dim(anemonef)[2])
bipartite.connectance
anemonef.network <- graph_from_incidence_matrix(anemonef, directed = TRUE, mode = 'in')
# Calculate conectance of anemoref
bipartite.connectance <- ecount(anemonef.network) / (sum(V(anemonef.network)$type) * (vcount(anemonef.network) - sum(V(anemonef.network)$type)) )
## Mean generality of species in the network
Generality <- function(M){
return(sum(colSums(M))/sum((colSums(M)!=0)));
}
## Mean vulnerability of the species in the network
Vulnerability <- function(M){
return(sum(rowSums(M))/sum((rowSums(M)!=0)));
}
## In-degree or number of prey of all species in the network
InDegree <- function(M){
return(colSums(M));
}
## Out-degree or number of predators of all species in the network
OutDegree <- function(M){
return(rowSums(M));
}
## Standard deviation of generality:
SDGenerality <- function(M){
return(sd(colSums(M) / (sum(M)/dim(M)[1]) ));
}
## Standard deviation of vulnerability:
SDVulnerability <- function(M){
return(sd(rowSums(M) / (sum(M)/dim(M)[1]) ));
}
## Fraction of basal species
FractionOfBasal <- function(M){
M_temp <- M;
diag(M_temp) <- 0;
b_sps <- sum(which(InDegree(M_temp) == 0) %in% which(OutDegree(M_temp) >= 1));
return(b_sps / dim(M)[1]);
}
## Fraction of top predator species
FractionOfTop <- function(M){
M_temp <- M;
diag(M_temp) <- 0;
t_sps <- sum(which(InDegree(M_temp) >= 1) %in% which(OutDegree(M_temp) == 0));
return(t_sps / dim(M)[1]);
}
## Fraction of intermediate consumer species
FractionOfIntermediate <- function(M){
M_temp <- M;
diag(M_temp) <- 0;
i_sps <- sum(which(InDegree(M_temp) >= 1) %in% which(OutDegree(M_temp) >= 1));
return(i_sps / dim(M)[1]);
}
gen <- Generality(benguela.AM)
vul <- Vulnerability(benguela.AM)
sdgen <- SDGenerality(benguela.AM)
sdvul <- SDVulnerability(benguela.AM)
B <- FractionOfBasal(benguela.AM)
I <- FractionOfIntermediate(benguela.AM)
T <- FractionOfTop(benguela.AM)
